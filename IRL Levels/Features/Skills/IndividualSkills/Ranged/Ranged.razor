@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService localStorage

@using System.Text.Json

<div class="row">
    <div class="col d-flex justify-content-center">
        <button class="xp-button btn btn-warning border border-2 m-1" @onclick='async () => await AddEntry("X")'>X</button>
        <button class="xp-button btn btn-warning border border-2 m-1" @onclick='async () => await AddEntry("10")'>10</button>
        <button class="xp-button btn btn-warning border border-2 m-1" @onclick='async () => await AddEntry("9")'>9</button>
        <button class="xp-button btn btn-danger border border-2 m-1" @onclick='async () => await AddEntry("8")'>8</button>

    </div>
</div>
<div class="row">
    <div class="col d-flex justify-content-center">
        <button class="xp-button btn btn-danger border border-2 m-1" @onclick='async () => await AddEntry("7")'>7</button>
        <button class="xp-button btn btn-primary border border-2 m-1" @onclick='async () => await AddEntry("6")'>6</button>
        <button class="xp-button btn btn-primary border border-2 m-1" @onclick='async () => await AddEntry("5")'>5</button>
        <button class="xp-button btn btn-dark border border-2 m-1" @onclick='async () => await AddEntry("4")'>4</button>
    </div>
</div>
<div class="row">
    <div class="col d-flex justify-content-center">
        <button class="xp-button btn btn-dark border border-2 m-1" @onclick='async () => await AddEntry("3")'>3</button>
        <button class="xp-button btn bg-white border border-2 m-1" @onclick='async () => await AddEntry("2")'>2</button>
        <button class="xp-button btn bg-white border border-2 m-1" @onclick='async () => await AddEntry("1")'>1</button>
        <button class="xp-button btn bg-light border border-black  border-2 m-1" @onclick='async () => await AddEntry("M")'>M</button>
    </div>
</div>
<div class="row">
    <div class="col d-flex justify-content-around">
        <button class="xp-button btn btn-warning border border-2 m-2" @onclick=Undo><i class="bi bi-arrow-counterclockwise h3"></i></button>
    </div>
</div>
<div class="row">
    <div class="col">
        <table class="table">
            <thead>
                <tr>
                    <th>History</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var history in History)
                {
                    <tr>
                        <td>@history.DateTime</td>
                        <td>@history.Value</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@code {
    [Parameter]
    public EventCallback<decimal> IncrementXP { get; set; }

    private List<Score> Scores { get; set; } = [];

    private History[] History { get; set; } = [];

    private const string RANGED_HISTORY = "ranged-history";

    protected override async Task OnInitializedAsync()
    {
        await DisplayHistory();
    }

    public async Task AddEntry(string score)
    {
        var xp = GetXPFromScore(score);

        await AddHistory(new History(DateTime.Now, score));

        await IncrementXP.InvokeAsync(xp);
    }

    public decimal GetXPFromScore(string score) => score switch
    {
        "X" => 40m, /* X is worth 10 * 4 */
        "M" => 0m,
        _ => int.Parse(score) * 4
    };

    public async Task AddHistory(History record)
    {
        var history = await GetHistories();

        history.Push(record);

        await SetHistories(history);
    }

    public async Task Undo()
    {
        var history = await GetHistories();

        if (history.Count > 0)
        {
            var remove = history.Pop();

            var xp = GetXPFromScore(remove.Value);

            await IncrementXP.InvokeAsync(xp * -1m);

            await SetHistories(history);
        }
    }

    public async Task<Stack<History>> GetHistories()
    {
        if (await localStorage.ContainKeyAsync(RANGED_HISTORY))
        {
            var history = await localStorage.GetItemAsync<List<History>>(RANGED_HISTORY) ?? [];

            return new Stack<History>(history.OrderBy(h => h.DateTime));
        }

        return new Stack<History>();
    }

    public async Task SetHistories(Stack<History> histories)
    {
        await localStorage.SetItemAsync(RANGED_HISTORY, histories);

        await DisplayHistory();
    }

    public async Task DisplayHistory()
    {
        var histories = await GetHistories();

        History = histories
            .OrderByDescending(h => h.DateTime)
            .Take(10)
            .ToArray();
    }
}

@using IRL_Levels.Extentions
@using IRL_Levels.Services.Clipboard
@using IRL_Levels.Features.Shared
@using Append.Blazor.WebShare

@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject IClipboardService clipboardService
@inject NavigationManager Nav

<div class="row">
    <div class="col">
        <InputSelect class="form-select m-1" aria-label="Exercise type" @bind-Value="selectedExerciseType">
            @foreach (var exerciseType in Enum.GetValues<ExerciseType>())
            {
                <option value="@exerciseType">@exerciseType.GetDescription() @GetExerciseTypeEmoji(exerciseType)</option>
            }
        </InputSelect>
    </div>
</div>
<div class="row">
    <div class="col d-flex justify-content-center">
        <button class="xp-button btn btn-primary border border-2 m-1" @onclick="async () => await AddEntry(10)">10m</button>
        <button class="xp-button btn btn-primary border border-2 m-1" @onclick="async () => await AddEntry(50)">50m</button>
        <button class="xp-button btn btn-primary border border-2 m-1" @onclick="async () => await AddEntry(100)">100m</button>
        <button class="xp-button btn btn-primary border border-2 m-1" @onclick="async () => await AddEntry(250)">250m</button>
        <button class="xp-button btn btn-primary border border-2 m-1" @onclick="async () => await AddEntry(500)">500m</button>
    </div>
</div>
<div class="row">
    <div class="col d-flex justify-content-center">
        <button class="xp-button btn btn-primary border border-2 m-1" @onclick="async () => await AddEntry(1000)">1km</button>
        <button class="xp-button btn btn-primary border border-2 m-1" @onclick="async () => await AddEntry(2000)">2km</button>
        <button class="xp-button btn btn-primary border border-2 m-1" @onclick="async () => await AddEntry(5000)">5km</button>
        <button class="xp-button btn btn-primary border border-2 m-1" @onclick="async () => await AddEntry(10000)">10km</button>
        <button class="xp-button btn btn-primary border border-2 m-1" @onclick="async () => await AddEntry(25000)">25km</button>
    </div>
</div>
<div class="row">
    <div class="col">
        <div class="d-flex justify-content-around">
            <button class="xp-button btn btn-warning border border-2 m-2" @onclick=Undo><i class="bi bi-arrow-counterclockwise h3"></i></button>
            <div class="manual-input-container m-1 d-flex justify-content-center border border-2">
                <InputNumber class="form-control m-1" @bind-value="ManualEntryXP" placeholder="Enter Metres" min="0" />
                <button class="xp-button btn btn-secondary border border-2 m-1" disabled="@(ManualEntryXP is null)" @onclick="async () => await ManualEntry(ManualEntryXP ?? 0)">Submit</button>
            </div>
        </div>
    </div>
</div>
<div class="row">
    <div class="col">
        <table class="table">
            <thead>
                <tr>
                    <th>History</th>
                    <th></th>
                    <th></th>
                    <th></th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var history in History)
                {
                    var shareText = GetShareText(history);

                    <tr>
                        <td>@history.DateTime</td>
                        <td>@GetExerciseTypeEmoji(history.ExerciseType)</td>
                        <td>@history.Value</td>
                        <td><CopyButton CopyText="@shareText" /></td>
                        <td><ShareButton Title="Agility" ShareText="@shareText" URL="@(Nav.Uri)" /></td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@code {
    [Parameter]
    public EventCallback<decimal> IncrementXP { get; set; }

    [CascadingParameter]
    public decimal CurrentLevel { get; set; }

    public decimal? ManualEntryXP { get; set; }

    private History[] History { get; set; } = [];

    private const string AGILITY_HISTORY = "agility-history";

    private ExerciseType[]? exerciseTypes { get; set; }
    private ExerciseType selectedExerciseType { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var exerciseTypes = Enum.GetValues<ExerciseType>();
        selectedExerciseType = ExerciseType.Running;

        await DisplayHistory();

    }

    public async Task ManualEntry(decimal? value)
    {
        if (value is not null && value > 0)
        {
            await AddEntry((decimal)value);
        }
    }

    public async Task AddEntry(decimal meters)
    {
        await AddHistory(new History(DateTime.Now, meters, selectedExerciseType));

        await IncrementXP.InvokeAsync(meters * GetXPMultiplier(selectedExerciseType));
    }

    public async Task AddHistory(History record)
    {
        var history = await GetHistories();

        history.Push(record);

        await SetHistories(history);
    }

    public async Task Undo()
    {
        var history = await GetHistories();

        if (history.Count > 0)
        {
            var remove = history.Pop();

            await IncrementXP.InvokeAsync(remove.Value * GetXPMultiplier(remove.ExerciseType) * -1m);

            await SetHistories(history);
        }
    }

    public async Task<Stack<History>> GetHistories()
    {
        if (await localStorage.ContainKeyAsync(AGILITY_HISTORY))
        {
            var history = await localStorage.GetItemAsync<List<History>>(AGILITY_HISTORY) ?? [];

            return new Stack<History>(history.OrderBy(h => h.DateTime));
        }

        return new Stack<History>();
    }

    public async Task SetHistories(Stack<History> histories)
    {
        await localStorage.SetItemAsync(AGILITY_HISTORY, histories);

        await DisplayHistory();
    }

    public async Task DisplayHistory()
    {
        var histories = await GetHistories();

        History = histories
            .OrderByDescending(h => h.DateTime)
            .Take(10)
            .ToArray();
    }

    public string GetShareText(History history) => $@"Agility {history.DateTime.ToShortDateString()} | {history.Value}m {history.ExerciseType.GetDescription().ToLower()} {GetExerciseTypeEmoji(history.ExerciseType)}
Level {CurrentLevel}";

    public string GetExerciseTypeEmoji(ExerciseType exerciseType) => exerciseType switch
    {
        ExerciseType.Running => "🏃",
        ExerciseType.Swimming => "🏊‍♂",
        ExerciseType.Rowing => "🚣",
        _ => throw new NotSupportedException()
    };

    public decimal GetXPMultiplier(ExerciseType exerciseType) => exerciseType switch
    {
        ExerciseType.Running => 1m,
        ExerciseType.Swimming => 4m,
        ExerciseType.Rowing => 0.5m,
        _ => throw new NotSupportedException()
    };
}

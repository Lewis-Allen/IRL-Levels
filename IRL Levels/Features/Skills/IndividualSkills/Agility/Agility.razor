@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService localStorage

@using System.Text.Json

<div class="row">
    <div class="col d-flex justify-content-center">
        <button class="xp-button btn btn-primary border border-2 m-1" @onclick="() => IncrementXP.InvokeAsync(10)">10m</button>
        <button class="xp-button btn btn-primary border border-2 m-1" @onclick="() => IncrementXP.InvokeAsync(50)">50m</button>
        <button class="xp-button btn btn-primary border border-2 m-1" @onclick="() => IncrementXP.InvokeAsync(100)">100m</button>
        <button class="xp-button btn btn-primary border border-2 m-1" @onclick="() => IncrementXP.InvokeAsync(250)">250m</button>
        <button class="xp-button btn btn-primary border border-2 m-1" @onclick="() => IncrementXP.InvokeAsync(500)">500m</button>
    </div>
    <div class="col d-flex justify-content-center">
        <button class="xp-button btn btn-primary border border-2 m-1" @onclick="() => IncrementXP.InvokeAsync(1000)">1km</button>
        <button class="xp-button btn btn-primary border border-2 m-1" @onclick="() => IncrementXP.InvokeAsync(2000)">2km</button>
        <button class="xp-button btn btn-primary border border-2 m-1" @onclick="() => IncrementXP.InvokeAsync(5000)">5km</button>
        <button class="xp-button btn btn-primary border border-2 m-1" @onclick="() => IncrementXP.InvokeAsync(10000)">10km</button>
        <button class="xp-button btn btn-primary border border-2 m-1" @onclick="() => IncrementXP.InvokeAsync(25000)">25km</button>
    </div>
    <div class="col">
        <div class="manual-input-container m-1 d-flex justify-content-center border border-2">
            <InputNumber class="form-control m-1" @bind-Value="ManualEntryXP" placeholder="Enter Metres" min="0" />

            <button class="xp-button btn btn-secondary border border-2 m-1" @onclick="async () => await ManualEntry(ManualEntryXP)">Submit</button>
        </div>
    </div>
</div>


@code {
    [Parameter]
    public EventCallback<decimal> IncrementXP { get; set; }

    public decimal? ManualEntryXP { get; set; }

    public async Task ManualEntry(decimal? value)
    {
        if (ManualEntryXP is not null && ManualEntryXP > 0)
        {
            await IncrementXP.InvokeAsync((decimal)ManualEntryXP);
        }
    }
}

@page "/skills/{skillname}";
@inject HttpClient Http;
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager Nav

@using System.Text.Json;

@if (SelectedComponent is not null)
{
    <div class="container" style="max-width:500px;">
        <div class="row">
            <div class="col">
                <button class="btn btn-primary" @onclick="@(()=>Nav.NavigateTo(Nav.BaseUri + "skills"))">Skills</button>
            </div>
        </div>
        <div class="row">
            <div class="col">
                <div class="bg-light p-3 m-3 rounded">
                    <div class="row">
                        <div class="col d-flex justify-content-between">
                            <img src="@("images/" + SkillName).svg" class="skill-icon w-50 p-3" alt="@(SkillName)" />
                            <div class="d-flex flex-column justify-content-around">
                                <h1>Lvl: @currentLevel</h1>
                                <h2>XP: @($"{currentXP:n0}")</h2>
                                <h2>Left: @($"{remainingXP:n0}")</h2>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col">
                            <div class="progress" style="height: 40px;">
                                <div class="progress-bar bg-success" role="progressbar" style="width: @(percentage)%; font-size:18px;" aria-valuenow="@(percentage)" aria-valuemin="0" aria-valuemax="100">@(percentage)%</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <DynamicComponent Type="SelectedComponent.Type" Parameters="SelectedComponent.Parameters" />
    </div>
}

@code {

    [Parameter]
    public required string SkillName { get; set; }

    private decimal currentXP;
    private decimal currentLevel;
    private decimal remainingXP;
    private decimal percentage;

    private Dictionary<string, ComponentMetaData> Components => new()
        {
            ["ranged"] = new ComponentMetaData()
            {
                Type = typeof(Ranged.Ranged),
                Name = "ranged",
                Parameters = { [nameof(Ranged.Ranged.IncrementXP)] = EventCallback.Factory.Create<decimal>(this, IncrementXP) }
            },
            ["agility"] = new ComponentMetaData()
            {
                Type = typeof(Agility.Agility),
                Name = "agility",
                Parameters = { [nameof(Agility.Agility.IncrementXP)] = EventCallback.Factory.Create<decimal>(this, IncrementXP) }
            },
            ["attack"] = new ComponentMetaData()
            {
                Type = typeof(Attack.Attack),
                Name = "attack",
                Parameters = { [nameof(Attack.Attack.IncrementXP)] = EventCallback.Factory.Create<decimal>(this, IncrementXP) }
            },
            ["strength"] = new ComponentMetaData()
            {
                Type = typeof(Strength.Strength),
                Name = "strength",
                Parameters = { [nameof(Strength.Strength.IncrementXP)] = EventCallback.Factory.Create<decimal>(this, IncrementXP) }
            },
        };

    private ComponentMetaData? SelectedComponent;

    private LevelBoundry[] Levels { get; set; } = [];

    protected override async Task OnInitializedAsync()
    {
        string skillType = SkillName.ToLower() switch
        {
            "ranged" => nameof(Ranged),
            "agility" => nameof(Agility),
            "attack" => nameof(Attack),
            "strength" => nameof(Strength),
            _ => throw new NotSupportedException() // need to 404 here
        };

        SelectedComponent = Components[SkillName.ToLower()];

        await LoadXP();
    }

    private async Task LoadXP()
    {
        currentXP = 0;

        var levels = await Http.GetFromJsonAsync<LevelBoundry[]>("sample-data/OSRS_EXP_Table.json") ?? [];

        Levels = levels
            .OrderBy(l => l.Level)
            .ToArray();

        if (SelectedComponent is not null)
        {
            var storedXP = await localStorage.GetItemAsync<decimal>(SelectedComponent.Name);

            if (storedXP != default)
            {
                currentXP = storedXP;
            }
        }

        currentLevel = GetCurrentLevel(currentXP);
        remainingXP = GetRemainingXP(currentXP);
        percentage = GetPercentage(currentXP);
    }

    private async Task IncrementXP(decimal score)
    {
        currentXP += score;
        currentLevel = GetCurrentLevel(currentXP);
        remainingXP = GetRemainingXP(currentXP);
        percentage = GetPercentage(currentXP);

        if (SelectedComponent is not null)
        {
            await localStorage.SetItemAsync(SelectedComponent.Name, currentXP);
        }
    }

    private decimal GetCurrentLevel(decimal xp)
    {
        var level = Levels?.Where(l => xp >= l.Experience).MaxBy(l => l.Level);

        var currentLevel = 1;
        if (level is not null)
        {
            currentLevel = level.Level;
        }

        return currentLevel;
    }

    private decimal GetRemainingXP(decimal xp)
    {
        var level = Levels?.Where(l => xp < l.Experience).MinBy(l => l.Level);

        decimal remainingXP = 0;
        if (level is not null)
        {
            remainingXP = level.Experience - xp;
        }

        return remainingXP;
    }

    private decimal GetPercentage(decimal currentXP)
    {
        var level = Levels?.Where(l => currentXP >= l.Experience).MaxBy(l => l.Level);

        decimal percentage = 0;

        if (level is not null)
        {
            decimal baseXP = level.Experience;
            decimal nextLevelXP = currentXP + remainingXP;

            decimal totalRequired = nextLevelXP - baseXP;
            decimal remaining = remainingXP;

            if (totalRequired != 0 && remainingXP != 0)
            {
                percentage = Math.Round(1m - (remainingXP / totalRequired), 4, MidpointRounding.ToZero);
            }
        }
        return Math.Round(percentage * 100, 2);
    }
}